#ifndef _beamND280_h_
#define _beamND280_h_

// this was really funny include :) #include "beamND280.h"
#include "TFile.h"
#include "TTree.h"
#include "TGeoElement.h"
#include "TGeoVolume.h"
#include "TGeometry.h"
#include "pdg.h"
#include "beam.h"
#include "beam_uniform.h"

/// The beam shoots with identical particles (whose energy is defined by some 
/// energy profile but the direction of momentum is identical)
/// beam: this class provides the input of the initial beam particle 
/// into the generator.The beam particle is defined by providing 
/// its energy, direction and its PDG code to the constructor
/// of the beam class 


/// find the place on the neutrino path with probability 
/// proportional to nucleon density in the detector
/// or place on its path but return the detecor decsity in
/// that place times the length of the track contaned 
/// in the detector
/// also set the isotope on which the interaction is to be performed
/// 
class GeoPlacer ///< dummy GeoPlacer
{protected:
    vec rmin;
    vec rmax; 
    bool spread;
 public:
	GeoPlacer(params& p)
	{ rmin=p.geo_o-p.geo_d;
	  rmax=p.geo_o+p.geo_d;
	  spread =rmin.x<rmax.x and rmin.y<rmax.y and rmin.z<rmax.z;
	}
	virtual double doPlacement(event &e)
	{
	   if(!spread)
	     return 0;
	 
	   vec d=rmax-rmin;
	   d.x*=frandom();
	   d.y*=frandom();
	   d.z*=frandom();
	   e.in[0].r=rmin+d;
     
	   return 1;
	}
};

/// Placer using the ND280 Geometry 
class GeoPlacerND280: public GeoPlacer
{
  TGeoVolume *top;
  //elements table;
  GeoPlacerND280(params &p):GeoPlacer(p)
  { if(p.geo_file!="")
    {
    	cout<< "ola"<<endl;
	}
  }
	
};

/// The neutrino extracted from the files 
/// generated by neut for the ND280 detecor
class beamND280: public beam_uniform
{  
private:
   string foldername;
   TFile file;
   TTree tree;       
public:   
   beamND280(params& p):beam_uniform(p)
   { }
   /// get next particle form the beam
   virtual particle shoot()
   { 
	int pdg = 12;
	double mass = 1.0;
	 particle p(pdg,mass);
     p.set_momentum(dir);
     p.set_energy(g.shoot());
     return p;
   }
private:
   void openfile(char * name)
   { //file.Open(name);
     
   }
   
};
#endif
