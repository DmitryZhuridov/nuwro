#include "beamND280.h"
#include "TFile.h"
#include "TTree.h"
#include "TGeoElement.h"
#include "TGeometry.h"

/// The beam shoots with identical particles (whose energy is defined by some 
/// energy profile but the direction of momentum is identical)
/// beam: this class provides the input of the initial beam particle 
/// into the generator.The beam particle is defined by providing 
/// its energy, direction and its PDG code to the constructor
/// of the beam class 


/// find the place on the neutrino path with probability 
/// proportional to nucleon density in the detector
/// or place on its path but return the detecor decsity in
/// that place times the length of the track contaned 
/// in the detector
/// also set the isotope on which the interaction is to be performed
/// 
class GeoPlacer ///< dummy GeoPlacer
{

	public:
	GeoPlacer(params& p){}
	/// place in 0 (or anywhere in the detector ) 
	/// convention must be established
	virtual double doPlacement(event &e)
	{ e.in[0].r=vec(0,0,0);
	  return 1;
	}
	/// place in the box(a,b)
	virtual double doPlacement(event &e, vec a,vec b)
	{d=b-a;
	 d.x*=frandom();
	 d.y*=frandom();
	 d.z*=frandom();
	 e.in[0].r=a+d;
	 return 1;
	 }
};

/// Placer using the ND280 Geometry 
class GeoPlacerND280: public GeoPlacer
{
  TGeoVoume *top;
  //elements table;
	
};

/// The neutrino extracted from the files 
/// generated by neut for the ND280 detecor
class beamND280: public beam
{  
private:
   TTree    tree;       
public:   
   beam(params& p)
   { }
   /// get next particle form the beam
   virtual particle shoot()
   { 
	 particle p(pdg,mass);
     p.set_momentum(dir);
     p.set_energy(g.shoot());
     return p;
   }
};
